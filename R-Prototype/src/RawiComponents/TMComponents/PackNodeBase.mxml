<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	mouseUp="mouseUpHdlr(event)" mouseDown="mouseDownHdlr(event)" mouseMove="mouseMoveHdlr(event)"
	mouseOver="mouseOverHdlr(event)" mouseOut="mouseOutHdlr(event)" keyDown="keyDownHdlr(event)" keyUp="keyUpHdlr(event)" >
	<mx:Script>
		<![CDATA[
			import mx.containers.VBox;
			import mx.containers.Panel;
			public var nid:int;
			public var nodeType:String;
			public var inputFromNodes:Dictionary = new Dictionary();
			public var outputToNodes:Dictionary = new Dictionary();
			public var parentCont:EditTM;
			protected var m_inputCenter:Point;
			protected var m_outputCenter:Point;
			private var dragging:Boolean = false;
			public var overMe:Boolean = false;
			[Bindable]
			public var propsContainer:propsBase;
			public var isMultiNode:Boolean = false;
			public function get inputCenter():Point
			{
				return parentCont.ecran.globalToLocal(localToGlobal(m_inputCenter))
			}
			public function get outputCenter():Point
			{
				return parentCont.ecran.globalToLocal(localToGlobal(m_outputCenter));
			}
			public function getXmlRepresentation():XMLNode
			{ return null }
			// update the propsContainer
			public function setAsActiveNode():void
			{
				this.parentCont.propertiesPanel.removeAllChildren();
				this.parentCont.propertiesPanel.addChild(this.propsContainer);
				parentCont.activeNode = this;
				parentCont.reDrawObjects();
			}
			public function drawObject():void {}
			private function mouseOverHdlr(event:MouseEvent):void
			{
				overMe = true;
				this.parentCont.activeOverNode = this;
			}
			private function mouseOutHdlr(event:MouseEvent):void
			{
				overMe = false;
				this.parentCont.activeOverNode = null;
			}
			private function mouseMoveHdlr(event:MouseEvent):void
			{
				parentCont.reDrawConnections();
				if (dragging)
				{
					parentCont.reDrawConnections();
					this.propsContainer.showPos(this.x, this.y);
				}
				else if (this.parentCont.stateEditor.state == EditorState.NEW_CONN)
				{
					this.parentCont.reDrawTempConnection();
				}
				else if (this.parentCont.stateEditor.state == EditorState.DEL_CONN)
				{
					this.parentCont.reDrawTempConnection();
				}
			}
			private function keyDownHdlr(event:KeyboardEvent):void
			{
				// delete the node
				if (event.keyCode == Keyboard.DELETE)
				{
					// remove references
					for each (var ref:int in this.inputFromNodes)
						delete PackNodeBase(this.parentCont.nodesMap[ref]).outputToNodes[this.nid];
					for each (var ref2:int in this.outputToNodes)
						delete PackNodeBase(this.parentCont.nodesMap[ref2]).inputFromNodes[this.nid];
					// remove from stage
					delete this.parentCont.nodesMap[this.nid];
					this.parentCont.activeNode = null;
					this.parentCont.reDrawConnections();
					this.parentCont.ecran.removeChild(this);
				}
				else if (event.keyCode == Keyboard.CONTROL)
				{
					this.parentCont.stateEditor.state = EditorState.NEW_CONN;
					this.parentCont.reDrawTempConnection();
				}
				else if (event.keyCode == Keyboard.SHIFT)
				{
					this.parentCont.stateEditor.state = EditorState.DEL_CONN;
					this.parentCont.reDrawTempConnection();
				}
				// stop Dragging
				if (dragging)
				{
					stopDrag();
					dragging = false;
				}
			}
			private function keyUpHdlr(event:KeyboardEvent):void
			{
				this.parentCont.stateEditor.state = EditorState.NOTHING;
				this.parentCont.reDrawTempConnection();
			}
			private function mouseDownHdlr(event:MouseEvent):void
			{
				parentCont.reDrawConnections();
				event.stopImmediatePropagation();
				if (this.parentCont.stateEditor.state == EditorState.NOTHING)		// Drag the node
				{
					startDrag();
					dragging = true;
					setAsActiveNode();
				}
				else if (this.parentCont.stateEditor.state == EditorState.NEW_CONN)
				{
					addNewConnection();
					this.parentCont.stateEditor.state = EditorState.NOTHING;
				}
				else if (this.parentCont.stateEditor.state == EditorState.DEL_CONN)
				{
					deleteConnection();
					this.parentCont.stateEditor.state = EditorState.NOTHING;
				}
			}
			private function mouseUpHdlr(event:MouseEvent):void
			{
				parentCont.reDrawConnections();
				if (dragging)
				{
					stopDrag();
					dragging = false;
					// if you dragged the button outside
					var plusX:int = this.x < 0 ? -this.x : 0;
					var plusY:int = this.y < 0 ? -this.y : 0;
					for each (var pn:PackNodeBase in this.parentCont.nodesMap)
					{
						pn.x += plusX;
						pn.y += plusY;
					}
					this.parentCont.reDrawConnections();
				}
				else if (this.parentCont.stateEditor.state == EditorState.NEW_CONN)
				{
					addNewConnection();
					this.parentCont.stateEditor.state = EditorState.NOTHING;
				}
				else if (this.parentCont.stateEditor.state == EditorState.DEL_CONN)
				{
					deleteConnection();
					this.parentCont.stateEditor.state = EditorState.NOTHING;
				}
			}
			private function addNewConnection():void
			{
				if (this.parentCont.activeNode != null && this.parentCont.activeNode != this)
				{
					this.parentCont.activeNode.outputToNodes[this.nid] = this.nid;
					this.inputFromNodes[this.parentCont.activeNode.nid] = this.parentCont.activeNode.nid;
				}
				this.parentCont.reDrawConnections();
			}
			private function deleteConnection():void
			{
				if (this.parentCont.activeNode != null && this.parentCont.activeNode != this)
				{
					delete this.parentCont.activeNode.outputToNodes[this.nid];
					delete this.inputFromNodes[this.parentCont.activeNode.nid];
				}
				this.parentCont.reDrawConnections();
			}
			public function get isJoiner():Boolean
			{ return false; }
			public function get isSplitter():Boolean
			{ return false; }
		]]>
	</mx:Script>

</mx:Canvas>
