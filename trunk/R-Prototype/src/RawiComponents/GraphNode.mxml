<?xml version="1.0" encoding="utf-8"?>
<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml"
	label="{propsContainer.nameInput.text}"
	mouseDown="mouseDownEventHandler(event)"
	mouseUp="mouseUpEventHandler(event)"
	mouseMove="mouseMoveEventHandler()"
	enabled="{propsContainer.enableCheck.selected}"
	initialize="label = 'EmptyNodeGraph'">
	<mx:Script>
		<![CDATA[
			import mx.containers.HBox;
			import mx.containers.Panel;
			[Bindable]
			public var propsContainer:ButtonProperties = new ButtonProperties();
			private var nodeState:XML;
			public var targetContainer:Panel;
			public var nodeId:String;
			public var nodeType:String;
			public var inputFromNodes:Dictionary = new Dictionary();
			public var outputToNodes:Dictionary = new Dictionary();
			private var dragging:Boolean = false;
			
			public function updateNodeState(state:XML):void
			{
				// TODO: add here code for the new state from the WS
				nodeState = state;
				propsContainer.subStates.removeAllChildren();
				for each (var node:XML in nodeState.subState)
				{
					var line:HBox = new HBox();
					//line.addChild();
					propsContainer.subStates.addChild(line);
				}
			}
			private function mouseMoveEventHandler():void
			{
				if (dragging)
					GraphCanvas(this.parent).reDrawConnections();
			}
			private function mouseDownEventHandler(e:MouseEvent):void
			{
				if (e.shiftKey || e.ctrlKey || e.altKey) // set the start node for the operation
					GraphCanvas(this.parent).activeNode = this;
				else									// start dragging
				{
					startDrag();
					dragging = true;
					targetContainer.removeAllChildren();
					targetContainer.addChild(propsContainer);
				}
			}
			private function mouseUpEventHandler(e:MouseEvent):void
			{
				if (dragging)		// drag the node
				{
					stopDrag();
					dragging = false;
				}
				if (e.shiftKey)		// delete the node
				{
					if (GraphCanvas(this.parent).activeNode == this)
					{
						// remove references
						for each (var ref:String in this.inputFromNodes)
							delete GraphNode(GraphCanvas(this.parent).nodesMap[ref]).outputToNodes[this.nodeId];
						for each (var ref2:String in this.outputToNodes)
							delete GraphNode(GraphCanvas(this.parent).nodesMap[ref2]).inputFromNodes[this.nodeId];
						// remove from stage
						delete GraphCanvas(this.parent).nodesMap[this.nodeId];
						GraphCanvas(this.parent).reDrawConnections();
						GraphCanvas(this.parent).removeChild(this);
					}
				}
				else if (e.ctrlKey) // add new connection
				{
					if (GraphCanvas(this.parent).activeNode != null && GraphCanvas(this.parent).activeNode != this)
					{
						GraphCanvas(this.parent).activeNode.outputToNodes[this.nodeId] = this.nodeId;
						this.inputFromNodes[GraphCanvas(this.parent).activeNode.nodeId] = GraphCanvas(this.parent).activeNode.nodeId;
						GraphCanvas(this.parent).reDrawConnections();
					}
				}
				else if (e.altKey)	// delete the connection
				{
					if (GraphCanvas(this.parent).activeNode != null && GraphCanvas(this.parent).activeNode != this)
					{
						delete GraphCanvas(this.parent).activeNode.outputToNodes[this.nodeId];
						delete this.inputFromNodes[GraphCanvas(this.parent).activeNode.nodeId];
						GraphCanvas(this.parent).reDrawConnections();
					}
				}
			}
			public function getXmlRepresentation():XMLNode
			{
				var repr:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, this.nodeType);
				repr.attributes.x = this.x;
				repr.attributes.y = this.y;
				repr.attributes.id = this.nodeId;
				repr.attributes.name = this.propsContainer.nameInput.text;
				for each (var ref:String in inputFromNodes)
				{
					var tempNode:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, "input");
					tempNode.attributes.node = ref;
					repr.appendChild(tempNode);
				}
				for each (var reff:String in outputToNodes)
				{
					var tempNode2:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, "output");
					tempNode2.attributes.node = reff;
					repr.appendChild(tempNode2);
				}
				return repr;
			}
		]]>
	</mx:Script>
</mx:Button>
