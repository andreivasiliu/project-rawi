<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	initialize="init()" label="{'TM - ' + propsGen.schemaName.text}" xmlns:TMComponents="RawiComponents.TMComponents.*">
	<mx:Button x="10" y="0" label="Save" width="71" click="svh.Save()"/>
	<mx:Button x="89" y="0" label="Validate" width="85" click="svh.Validate()"/>
	<mx:Button x="182" y="0" label="Close" width="71" click="svh.Close()"/>
	<mx:HDividedBox left="3" top="30" right="3" bottom="3">
		<mx:Canvas height="100%" width="100%" id="baseEcran" clipContent="true" mouseDown="mouseDownHdlr(event)">
			<mx:Canvas id="ecran" x="0" y="0"/>
			<mx:Canvas id="ecranGlass" x="0" y="0" width="{ecran.width}" height="{ecran.height}" />
		</mx:Canvas>
		<mx:Panel layout="absolute" id="propertiesPanel" top="0" right="0" bottom="0" width="30%" height="100%" title="Properties" minWidth="200"/>
	</mx:HDividedBox>
	<mx:Script>
		<![CDATA[
			// Manage existing objects on the scene - add/delete connection
			private var m_activeNode:PackNodeBase = null;
			public var activeOverNode:PackNodeBase = null;
			public var stateEditor:EditorState = new EditorState();
			public function set activeNode(value:PackNodeBase):void
			{
				m_activeNode = value;
				reDrawObjects();
				propertiesPanel.removeAllChildren();
				
				if (value == null)
				{
					propertiesPanel.addChild(propsGen);
					ecran.setFocus();
				}
				else
				{
					propertiesPanel.addChild(value.propsContainer);
					value.setFocus();
				}
			}
			public function get activeNode():PackNodeBase
			{
				return m_activeNode;
			}
			private function mouseDownHdlr(event:MouseEvent):void
			{
				activeNode = null;
				this.stateEditor.state = EditorState.NOTHING;
				reDrawTempConnection();
				trace("MouseDown from EditTM");
			}
			public function reDrawConnections():void
			{
				ecran.graphics.clear();
				ecran.graphics.lineStyle(0, 0, 1, true);
				
				for each (var n:PackNodeBase in nodesMap)
					for each (var c:String in n.outputToNodes)
					{
						var x:int, y:int;
						x = n.outputCenter.x;
						y = n.outputCenter.y;
						ecran.graphics.moveTo(x, y);
						x = PackNodeBase(nodesMap[c]).inputCenter.x;
						y = PackNodeBase(nodesMap[c]).inputCenter.y;
						ecran.graphics.lineTo(x, y);
					}
				updateMultiNode();
			}
			public function reDrawObjects():void
			{
				for each (var pnb:PackNodeBase in nodesMap)
					pnb.drawObject();
			}
			public function reDrawTempConnection():void
			{
				ecranGlass.mouseEnabled = false;	// disable mouse events for the ecranGlass
				ecranGlass.graphics.clear();
				ecranGlass.graphics.lineStyle(0);
				if (activeNode != null)
				{
					if (this.stateEditor.state == EditorState.NEW_CONN)
					{
						var p:Point = new Point();
						p.x = activeNode.outputCenter.x;
						p.y = activeNode.outputCenter.y;
						ecranGlass.graphics.moveTo(p.x, p.y);
						
						p.x = ecranGlass.mouseX;
						p.y = ecranGlass.mouseY;
						ecranGlass.graphics.lineTo(p.x, p.y);
					}
					else if (this.stateEditor.state == EditorState.DEL_CONN)
					{
						if (activeOverNode != null && activeOverNode != activeNode)
							if (activeNode.outputToNodes[activeOverNode.nid] != undefined)
							{
								// Draw an X in the middle of the segment
								var center:Point = new Point();
								p = new Point();
								center.x = (activeNode.outputCenter.x + activeOverNode.inputCenter.x) / 2;
								center.y = (activeNode.outputCenter.y + activeOverNode.inputCenter.y) / 2;
								ecranGlass.graphics.lineStyle(0, 0xff0000);
								
								p.x = center.x - 5;
								p.y = center.y - 5;
								ecranGlass.graphics.moveTo(p.x, p.y);
								p.x = center.x + 5;
								p.y = center.y + 5;
								ecranGlass.graphics.lineTo(p.x, p.y);

								p.x = center.x + 5;
								p.y = center.y - 5;
								ecranGlass.graphics.moveTo(p.x, p.y);
								p.x = center.x - 5;
								p.y = center.y + 5;
								ecranGlass.graphics.lineTo(p.x, p.y);
							}
					}
				}
			}
		]]>
	</mx:Script>
		
	<mx:Script>
		<![CDATA[
			// Cod for container buttons
			import mx.core.Application;
			public var nodesMap:Dictionary = new Dictionary();
			[Bindable]
			public var propsGen:propsGeneral = new propsGeneral();
			public var svh:SaveValidateHdlr;
			public namespace tm = "http://www.example.org/TransformationModel";
			public function init():void
			{
				propsGen.initialize();
				activeNode = null;
				svh = new SaveValidateHdlr(this);
			}
			// init from Xml - call this when you receive datas from the server
			public function initFromXml(data:XML):void
			{
				use namespace tm;
				for each (var node:XML in data.transformationGraph.packNode + data.transformationGraph.packTransformerNode)
				{
					var gn:PackNodeBase;
					if (node.localName() == "packNode")
					{
						var pn:packNode = new packNode();
						gn = pn;
						ecran.addChild(gn);
						pn.propsContainer.initialize();
						pn.propsLocalContainer.pattern.text = node.pattern.@regex;
						pn.propsLocalContainer.isSplitter.selected = node.@isSplitter == "true" ? true : false;
					}
					if (node.localName() == "packTransformerNode")
					{
						var ptn:packTransformerNode = new packTransformerNode();
						gn = ptn;
						ecran.addChild(gn);
						ptn.propsContainer.initialize();
						ptn.propsLocalContainer.command.text = node.command.@exec;
						ptn.propsLocalContainer.isJoiner.selected = node.@isJoiner  == "true" ? true : false;
					}
					gn.nid = node.@id;
					nodesMap[gn.nid] = gn;
					gn.x = node.@x;
					gn.y = node.@y;
					gn.parentCont = this;
					gn.propsContainer.nodeName.text = node.@name;
					
					for each (var output:XML in node.output)
						gn.outputToNodes[int(output.@node)] = int(output.@node);
					
					for each (var input:XML in node.input)
						gn.inputFromNodes[int(input.@node)] = int(input.@node);
				}
				this.propsGen.schemaDescription.text = data.description;
				svh.savedVersion = getSchemaXmlRepresentation().toString();
				reDrawConnections();
				reDrawObjects();
				updateMultiNode();
			}
			public function getSchemaXmlRepresentation():XML
			{
				var tm:XML = new XML("<transformationModel xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " + 
						"xmlns='http://www.example.org/TransformationModel' " + 
						"xsi:schemaLocation='http://www.example.org/TransformationModel TransformationModel.xsd'/>");
				
				var gp:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, "globalParameters");
				var param:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, "parameter");
				param.attributes.name = "nr";
				param.attributes.default = "10";
				gp.appendChild(param);
				tm.appendChild(gp);
				
				var descr:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, "description");
				var descrVal:XMLNode = new XMLNode(XMLNodeType.TEXT_NODE, this.propsGen.schemaDescription.text); 
				descr.appendChild(descrVal);
				tm.appendChild(descr);
				
				var tg:XMLNode = new XMLNode(XMLNodeType.ELEMENT_NODE, "transformationGraph");
				for each (var pn:PackNodeBase in nodesMap)
					tg.appendChild(pn.getXmlRepresentation());
				tm.appendChild(tg);
				
				return tm;
			}
			public function addNewPN(xx:int, yy:int):void
			{
				trace("addNewPN", xx, yy);
				var pn:packNode = new packNode();
				ecran.addChild(pn);
				pn.x = xx;
				pn.y = yy;
				pn.nid = generateUniqueId();
				pn.parentCont = this;
				pn.propsContainer.initialize();
				pn.propsContainer.nodeName.text = "new Pack";
				nodesMap[pn.nid] = pn;
				reDrawConnections();
				pn.setAsActiveNode();
			}
			public function addNewPTN(xx:int, yy:int):void
			{
				trace("addNewPTN", xx, yy);
				var ptn:packTransformerNode = new packTransformerNode();
				ecran.addChild(ptn);
				ptn.x = xx;
				ptn.y = yy;
				ptn.parentCont = this;
				ptn.nid = generateUniqueId();
				ptn.propsContainer.initialize();
				ptn.propsContainer.nodeName.text = "new Transformer";
				nodesMap[ptn.nid] = ptn;
				reDrawConnections();
				ptn.setAsActiveNode();
			}
			public function generateUniqueId():int
			{
				// find the first id that is free in the given dictionary
				var id:int = 1;
				while (nodesMap[id.toString()] != undefined)
					id++;
				return id;
			}
			public function updateMultiNode():void
			{
				for each (var nd:PackNodeBase in nodesMap)
					nd.isMultiNode = false;
				for each (nd in nodesMap)
				{
					if (nd.isSplitter)
					{
						marked = new Dictionary();
						DFS(nd);
					}
				}
				reDrawObjects();
			}
			private var marked:Dictionary;
			private function DFS(nd:PackNodeBase):void
			{
				if (!nd.isJoiner)
				{
					nd.isMultiNode = true;
					for each (var child:int in nd.outputToNodes)
						DFS(nodesMap[child]);
				}
			}
		]]>
	</mx:Script>
	<TMComponents:PackGraphicLayout x="320" y="0" />
	<TMComponents:TransformerGraphicLayout x="380" y="0" />
	<TMComponents:PackGraphicLayout id="dummy1" x="320" y="0" mouseDown="dummy1.startDrag()" mouseUp="stopDrg1(event)"/>
	<TMComponents:TransformerGraphicLayout id="dummy2" x="380" y="0" mouseDown="{dummy2.startDrag(); trace('TGL', dummy2.width, dummy2.height)}" mouseUp="stopDrg2(event)"/>
	<mx:Script>
		<![CDATA[
			// add new packNode
			private var startPosition:int = 0;	// used to create an offset when creating new nodes by clicking and not dragging
			private function stopDrg1(event:MouseEvent):void
			{
				var p:Point = baseEcran.globalToLocal(new Point(event.stageX, event.stageY));
				// don't drop the button outside the baseEcran, but draw it inside the ecran Canvas
				if (p.x > 0 && p.y > 0 && p.x < baseEcran.width && p.y < baseEcran.height)
				{
					p = ecran.globalToLocal(new Point(event.stageX, event.stageY));
					addNewPN(p.x, p.y - 12);
				}
				else if (dummy1.x == 320 && dummy1.y == 0)
				{
					addNewPN(50 + startPosition * 10, 20 + startPosition * 10);
					startPosition = (startPosition + 1) % 10;
				}
				stopDrag();
				dummy1.x = 320;
				dummy1.y = 0;
			}
			// add new packTransformerNode
			private function stopDrg2(event:MouseEvent):void
			{
				var p:Point = baseEcran.globalToLocal(new Point(event.stageX, event.stageY));
				// don't drop the button outside the baseEcran, but draw it inside the ecran Canvas
				if (p.x > 0 && p.y > 0 && p.x < baseEcran.width && p.y < baseEcran.height)
				{
					p = ecran.globalToLocal(new Point(event.stageX, event.stageY));
					addNewPTN(p.x, p.y - 10);
				}
				else if (dummy2.x == 380 && dummy2.y == 0)
				{
					addNewPTN(50 + startPosition * 10, 20 + startPosition * 10);
					startPosition = (startPosition + 1) % 10;
				}
				stopDrag();
				dummy2.x = 380;
				dummy2.y = 0;
			}
		]]>
	</mx:Script>
</mx:Canvas>
