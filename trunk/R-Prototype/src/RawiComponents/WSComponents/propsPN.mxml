<?xml version="1.0" encoding="utf-8"?>
<propsBase xmlns="RawiComponents.WSComponents.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" initialize="init()">
	<mx:Form width="100%" height="100%" paddingLeft="4" paddingTop="5" paddingRight="5" indicatorGap="4">
		<mx:FormHeading label="Pack Properties" />
		<mx:FormItem label="Name" width="100%">
			<mx:TextInput id="nodeNameTextInput" width="100%" editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="    Pattern" width="100%">
			<mx:TextInput id="pattern" width="100%" editable="false"/>
		</mx:FormItem>
		<mx:CheckBox label="Splitter" id="isSplitter" paddingLeft="8" enabled="false"/>
		<mx:CheckBox label="Allows multiple files" id="allowsMultipleFiles" paddingLeft="8" enabled="false"/>
		<mx:Canvas width="100%" height="100%" verticalScrollPolicy="auto" id="canvasForFileBox"
			resize="fileBoxResizeHdlr(event)" scroll="fileBoxScrollHdlr(event)"
			mouseUp="mouseUpHdlr(event)" mouseDown="mouseDownHdlr(event)">
			<mx:VBox id="fileBox" width="100%" height="100%" initialize="addNewUploader()" />
		</mx:Canvas>
	</mx:Form>
	<mx:Script>
		<![CDATA[
			import mx.events.ResizeEvent;
			import RawiComponents.GlobalSettings;
			import mx.events.ScrollEvent;
			public function init():void
			{
				this.nodeName = this.nodeNameTextInput;
			}
			public function addNewUploader():Uploader
			{
				var upl:Uploader = new Uploader();
				fileBox.addChild(upl);
				upl.myOwner = this;
				return upl;
			}
			public function fileBoxResizeHdlr(event:ResizeEvent):void 
			{
				fileBox.width = canvasForFileBox.width-17;
				// the amount of visible files that fits int the props container (23 = Uploader.height)
				GlobalSettings.propsFileAmount = canvasForFileBox.height / 23 + 1;
				// the scroll position (offset) that the user selected (23 = Uploader.height)
				GlobalSettings.propsFileOffset = canvasForFileBox.verticalScrollPosition / 23;
				trace("scrolling to:", GlobalSettings.propsFileOffset, "visible:", GlobalSettings.propsFileAmount);				
			}
			public function fileBoxScrollHdlr(event:ScrollEvent):void
			{
				// the amount of visible files that fits int the props container (23 = Uploader.height)
				GlobalSettings.propsFileAmount = canvasForFileBox.height / 23 + 1;
				// the scroll position (offset) that the user selected (23 = Uploader.height)
				GlobalSettings.propsFileOffset = canvasForFileBox.verticalScrollPosition / 23;
				trace("scrolling to:", GlobalSettings.propsFileOffset, "visible:", GlobalSettings.propsFileAmount);
				scrolled = true;
			}
			private var scrolled:Boolean = false;
			public function mouseUpHdlr(event:MouseEvent):void {
				if (scrolled)
					this.ownerOfProps.parentCont.refreshHdlr()
				scrolled = false;
			}
			public function mouseDownHdlr(event:MouseEvent):void {
				scrolled = false;
			}
		]]>
	</mx:Script>
</propsBase>
