<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="23" initialize="init()">
	<mx:ViewStack x="0" y="0" id="viewstack" width="100%" height="100%">
		<mx:Canvas label="SelectFile" width="100%" height="100%">
			<mx:HBox width="100%">
				<mx:TextInput id="filePathLabel" text="{fileName}" width="100%" paddingTop="3" editable="false"/>
				<mx:Button label="..." click="browseHdlr()"/>
				<mx:Button label="Up" enabled="false" id="upButt" click="uploadHdlr()"/>
				<mx:CheckBox label="zip" id="zipFile"/>
			</mx:HBox>
		</mx:Canvas>
		<mx:Canvas label="ViewProgress" width="100%" height="100%">
			<mx:HBox width="100%">
				<mx:ProgressBar height="22" width="100%" id="progressBar" labelPlacement="center" source="{file}"/>
				<mx:Button label="Cancel" click="{file.cancel(); viewstack.selectedIndex = 0;}"/>
			</mx:HBox>
		</mx:Canvas>
		<mx:Canvas label="FileStatus" width="100%" height="100%" id="third">
			<mx:HBox width="100%" id="third2">
				<mx:TextInput id="fileOnServerName" text="{fileName}" width="100%" paddingTop="3" editable="false"/>
				<mx:Button label="Dld" click="downloadHdlr()"/>
				<mx:Button label="Del" click="deleteHdlr()"/>
			</mx:HBox>
		</mx:Canvas>
		<mx:Canvas label="DownloadProgress" width="100%" height="100%">
			<mx:HBox width="100%">
				<mx:ProgressBar height="22" width="100%" id="progressBarDld" labelPlacement="center" source="{fileDld}"/>
				<mx:Button label="Cancel" click="{fileDld.cancel(); viewstack.selectedIndex = 2;}"/>
			</mx:HBox>
		</mx:Canvas>
	</mx:ViewStack>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import RawiComponents.GlobalSettings;
			public var sessionState:SessionState;
			public var stateFile:FileState = new FileState();
			public var myOwner:propsPN;
			[Bindable]
			public var file:FileReference = new FileReference();
			[Bindable]
			public var fileDld:FileReference = new FileReference();
			public var fileIdOnServer:String = "";
			[Bindable]
			public var fileName:String = "";
			public function init():void
			{
				file.addEventListener(Event.CANCEL, cancelHandler);
				file.addEventListener(Event.COMPLETE, completeHandler);
				file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadDataComplete);
				file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				file.addEventListener(Event.OPEN, openHandler);
				file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				file.addEventListener(Event.SELECT, selectHandler);
				
				fileDld.addEventListener(ProgressEvent.PROGRESS, progressDldHandler);
				fileDld.addEventListener(Event.OPEN, openDldHandler);
				fileDld.addEventListener(Event.COMPLETE, completeDldHandler);
				stateFile.state = FileState.EMPTY;
				//viewstack.addEventListener(FlexEvent.UPDATE_COMPLETE, updatePage3);
			}
			private function browseHdlr():void {
				file.browse();
			}
			private function uploadHdlr():void
			{
				var uploadURL:URLRequest = new URLRequest();
				viewstack.selectedIndex = 1;
				//uploadURL.url = sessionState.uploadUrl + "/" + file.name;
				uploadURL.url = GlobalSettings.baseUri + "/TheUploadServlet/" + myOwner.ownerOfProps.parentCont.sessionState.sessionId +
					"/" + fileName + "?zipFile=" + zipFile.selected;
				trace("Upload file:", uploadURL.url);
				file.upload(uploadURL);
			}
			private function cancelHandler(event:Event):void { }
			private function completeHandler(event:Event):void {
				trace("completeHandler: " + event);
				//viewstack.selectedIndex = 2;
			}
			private function ioErrorHandler(event:IOErrorEvent):void {
				trace("ioErrorHandler: " + event);
			}
			private function openHandler(event:Event):void {
				trace("openHandler: " + event);
			}
			private function progressHandler(event:ProgressEvent):void {
				var file:FileReference = FileReference(event.target);
				//trace("progressHandler name=" + fileName + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
				if (progressBar != null)
					progressBar.label = fileName.substr(0, 15) + " " + int(event.bytesLoaded*100/event.bytesTotal) + "%";
			}
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				trace("securityErrorHandler: " + event);
			}
			private function selectHandler(event:Event):void {
				upButt.enabled = true;
				fileName = file.name;
				stateFile.state = FileState.SELECTED;
				this.myOwner.addNewUploader();
				trace("selectHandler", event);
			}
			private function uploadDataComplete(event:DataEvent):void {
				this.fileIdOnServer = event.data.match("[0-9]+")[0];
				trace("File id on server:", fileIdOnServer);
				viewstack.selectedIndex = 2;
				// PutFileInPackServlet
				var loader:URLLoader = new URLLoader();
				// TODO: find out how to cancel the cache - by then add the time parameter at the end 
				var request:URLRequest = new URLRequest(GlobalSettings.baseUri + "/PutFileInPackServlet?sessionId=" + 
						myOwner.ownerOfProps.parentCont.sessionState.sessionId +
						"&fileId=" + fileIdOnServer + "&fileName=" + fileName +
						"&packId=" + myOwner.ownerOfProps.nid + "&time=" + new Date().getTime());
				trace(request.url);
				GlobalSettings.configureListeners(loader);
				loader.addEventListener(Event.COMPLETE, trace);
				loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, getPutFileInPackServlet);
				loader.load(request);
			}
			private function getPutFileInPackServlet(event:HTTPStatusEvent):void
			{
				// TODO: this is temporary - the server should actualy return a propper response
				if (event.status == 200)
					trace("Asociation succeded-File: " + fileName + " (" + fileIdOnServer + ") on session " +
						myOwner.ownerOfProps.parentCont.sessionState.sessionId + " node(" +  myOwner.ownerOfProps.nid + ")", event);
				else
					Alert.show("File: " + fileName + " (" + fileIdOnServer + ") on session " + myOwner.ownerOfProps.parentCont.sessionState.sessionId +
						" node(" +  myOwner.ownerOfProps.nid + ")", "Error asociating file");
			}
			private function downloadHdlr():void
			{
				var downloadURL:URLRequest = new URLRequest();
				downloadURL.url = GlobalSettings.baseUri + "/TheDownloadServlet/" + myOwner.ownerOfProps.parentCont.sessionState.sessionId +
					"/" + fileIdOnServer + "/" + fileName;
				fileDld.download(downloadURL, fileName);
			}
			private function openDldHandler(event:Event):void
			{
				viewstack.selectedIndex = 3;
			}
			private function progressDldHandler(event:ProgressEvent):void {
				var file:FileReference = FileReference(event.target);
				trace("progressHandler name=" + fileDld.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
				if (progressBarDld != null)
					progressBarDld.label = fileDld.name.substr(0, 15) + " " + int(event.bytesLoaded*100/event.bytesTotal) + "%";
			}
			private function completeDldHandler(event:Event):void
			{
				viewstack.selectedIndex = 2;
			}
			private function deleteHdlr():void
			{
				var loader:URLLoader = new URLLoader();
				// TODO: find out how to cancel the cache - by then add the time parameter at the end 
				var request:URLRequest = new URLRequest();
				request.url = GlobalSettings.baseUri + "/TheDownloadServlet/" + myOwner.ownerOfProps.parentCont.sessionState.sessionId +
					"/" + fileIdOnServer + "/" + fileName + "&delete=true";
				trace(request.url);
				GlobalSettings.configureListeners(loader);
				loader.addEventListener(Event.COMPLETE, trace);
				loader.load(request);
				myOwner.fileBox.removeChild(this);
			}
		]]>
	</mx:Script>
</mx:Canvas>
