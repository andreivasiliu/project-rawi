<?xml version="1.0" encoding="utf-8"?>
<PackNodeBase xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="RawiComponents.WSComponents.*" initialize="init()"
	toolTipCreate="createCustomToolTip(event)" toolTip=" ">
	<mx:Label x="10" y="3" text="{propsContainer.nodeName.text}" id="nodeName"/>
	<mx:Label x="10" y="20" id="m_nodeState"
		text="{'(' + (pendingTasks + depNotMetTasks) + '/'+ workingTasks+ '/'+ doneTasks +')'}"/>
	<mx:Script>
		<![CDATA[
			import mx.events.ToolTipEvent;
			public var propsLocalContainer:propsPTN;
			[Bindable]
			public var pendingTasks:int = 0;		// pending jobs
			[Bindable]
			public var depNotMetTasks:int = 0;	// dependencies not met
			[Bindable]
			public var workingTasks:int = 0;		// currently working jobs
			[Bindable]
			public var doneTasks:int = 0;		// finished jobs

			private function init():void
			{
				this.nodeType = "packTransformerNode";
				this.m_inputCenter = new Point(0, 2);
				this.m_outputCenter = new Point(0, 19);
				this.propsLocalContainer = new propsPTN(); 
				this.propsContainer = this.propsLocalContainer;
				this.clipContent = false;
				this.propsContainer.ownerOfProps = this;
				this.nodeState = m_nodeState;
				trace("init from packTransformerNode");
			}
			private function createCustomToolTip(event:ToolTipEvent):void {
				var toolTip:packTransformerNodeToolTip = new packTransformerNodeToolTip();
				toolTip.toolTipData.pending = pendingTasks + depNotMetTasks;
				toolTip.toolTipData.working = workingTasks;
				toolTip.toolTipData.done = doneTasks;
				event.toolTip = toolTip;
			}
			public override function drawObject():void
			{
				this.graphics.clear();
				
				var fillType:String = GradientType.RADIAL;
				var colors:Array = [0xC0C9CF, 0xffffff];
				var alphas:Array = [1, 0.7];
				var ratios:Array = [0x88, 0xFF];
				var matr:Matrix = new Matrix();
				matr.createGradientBox(20, 20, 0, -10, 0);
				var spreadMethod:String = SpreadMethod.PAD;

				// Draw the object
				if (this.parentCont.activeNode == this)
					this.graphics.lineStyle(2, 0x888888, 1);
				else
					this.graphics.lineStyle(0, 0xffffff, 1);
				if (isMultiNode)
				{
					matr.createGradientBox(20, 20, 0, -10 + 10, 0 - 10);
					this.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod);
					this.graphics.drawCircle(0 + 10, 10 - 10, 10);
					this.graphics.endFill();

					matr.createGradientBox(20, 20, 0, -10 + 5, 0 - 5);
					this.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod);
					this.graphics.drawCircle(0 + 5, 10 - 5, 10);
					this.graphics.endFill();
				}
				matr.createGradientBox(20, 20, 0, -10, 0);
				this.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod);
				this.graphics.drawCircle(0, 10, 10);
				this.graphics.endFill();
				
				// above is like PTN from TM Components - Below shows status for running session
				
				
			}
			public override function get isJoiner():Boolean
			{
				return this.propsLocalContainer.isJoiner.selected;
			}
		]]>
	</mx:Script>
</PackNodeBase>
